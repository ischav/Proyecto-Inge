@model ProyectoInge1.Models.ModeloIntermedio
@{
    ViewBag.Title = "MEC_Unificado";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .required:after {
        content: " *";
        font-weight: bold;
        color: red;
    }
</style>

<script>
    /* Método que esconde el "div" de eliminar y muestra el "div" de modificar en la vista MEC_Unificado
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function habilitarCampos()
    {
        $('.elementoEliminar').hide();
        $('.elementoModificar').show();
        $("input").prop("disabled", false);
    }

    /* Método que esconde el "div" de modificar y muestra el "div" de eliminar en la vista MEC_Unificado
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function esconderModificar() {
        $("input").prop('disabled', true).trigger("click");
        $('.elementoModificar').hide();
        $('.elementoConsultar').show();
    }

    function funcionCancelar() {
        var respuesta = confirm('¿Confirma que no desea modificar este proyecto?');
        if (respuesta == true) {
            var url = '@Url.Action("MEC_Unificado", "ModuloUsuarios")';
            window.location.href = url;
        }
    }

    window.onload = function () {
        if(@Model.cambiosGuardados == 0 || @Model.cambiosGuardados == 1){
            $("input").prop('disabled', true).trigger("click");
            $('.elementoModificar').hide();
            $('.elementoConsultar').show();
        }
    }

    /* Método que elimina la tupla de la base de datos en la vista MEC_Unificado
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function confirmarEliminar(id) {
        var respuesta = confirm('¿Confirma que desea eliminar este usuario?');
        if (respuesta == true)
        {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("eliminarUsuario")',
                data: 'id=' + id,
                success: function (data) {
                    alert('Usuario eliminado exitosamente');
                    var url = '@Url.Action("Index", "ModuloUsuarios")';
                    window.location.href = url;
                },
            });
        }
    }
    
</script>
@{ HtmlString styleElementoEliminar;}
@{ HtmlString styleElementoModificar;}

@if(Model.errorValidacion == false) {
    styleElementoEliminar = new HtmlString("");
    styleElementoModificar = new HtmlString("style =\"display: none\"");
} else {
    styleElementoEliminar = new HtmlString("style =\"display: none\"");
    styleElementoModificar = new HtmlString("");
}

<!-- Se imprimen los botones de modificar y eliminar, cuando se ingresa a consultar los datos -->
<div class="elementoEliminar" @styleElementoEliminar>
    <h2>Detalles</h2>
    @if ((bool)Session["GUS-M"]) {
        <a class="btn btn-default" onclick="habilitarCampos()">Modificar</a>
    }
    @if ((bool)Session["GUS-E"]) {
        <a class="btn btn-default" id="eliminar" onclick="confirmarEliminar('@(Model.modeloUsuario.Id)')">Eliminar</a>
    }
</div>
<div class="elementoModificar" @styleElementoModificar>
    <h2>Modificar</h2>
</div>

<!-- Si la variable de cambios guardados es igual a 1, entonces los cambios se guardaron de manera exitosa
     en la base de datos, se imprime un mensaje de éxito
     Si la variable de cambios guardados es igual a 2, entonces los cambios no se guardaron de manera exitosa
     en la base de datos, se imprime un mensaje de error-->
@if(Model.cambiosGuardados == 1) {
    <div class="elementoEliminar" style="text-align: right; width: 100%; color:limegreen; font-weight:bold;">
        <p>Se guardaron los cambios exitosamente!</p>
    </div>
} else if(Model.cambiosGuardados == 2) {
    <div class="elementoModificar" style="text-align: right; width: 100%; color:red; font-weight:bold;">
        <p>Ha ocurrido un error al tratar de guardar los cambios!</p>
    </div>
}

<!-- Se despliega la información modificable, del elemento seleccionado cuando se va a modificar -->
            @using(Html.BeginForm()) {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.Nombre, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Apellido1, htmlAttributes: new { @class = "control-label required col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.Apellido1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.Apellido1, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Apellido2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.Apellido2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.Apellido2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.modeloUsuario.Cedula)
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.FechaNac, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.FechaNac, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.FechaNac, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Telefono1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.Telefono1, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.Telefono1, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Telefono2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.modeloUsuario.Telefono2, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modeloUsuario.Telefono2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modCrear.Email, htmlAttributes: new { @class = "control-label required col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.aspUserEmail, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.modCrear.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.modeloUsuario.Sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "F", false)@Html.DisplayName("Femenino")
                            @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "M", false)@Html.DisplayName("Masculino")
                            @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "O", false)@Html.DisplayName("Otro")
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.modeloUsuario.Id)

                    <div class="elementoModificar">
                        <div class="form-group">
                            <div class="form-inline" align="right">
                                <input type="submit" value="Aceptar" name="aceptar" class="btn btn-default" />
                                <a class="btn btn-default" onclick="funcionCancelar()">Cancelar</a>
                            </div>
                        </div>
                    </div>
                </div>
}


