<!-- Vista que despliega la información personal del usuario logeado en el sistema -->

@model ProyectoInge1.Models.ModeloIntermedio
@{
    ViewBag.Title = "Informacion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .required:after {
        content: " *";
        font-weight: bold;
        color: red;
    }
</style>

<script>
    /* Método que cancela la vista Información
     * Requiere: no aplica
     * Modifica: los campos en la vista Información
     * Retorna: el modelo cargado
     */
    function confirmarSalir() {
        var respuesta = confirm('¿Confirma que desea cancelar? Los cambios hechos no se guardarán');
        if (respuesta == true) {
            var url = '@Url.Action("Informacion", "ModuloUsuarios")';
            window.location.href = url;
        }
    }

    /* Método que esconde el "div" de eliminar y muestra el "div" de modificar en la vista Información
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function esconderEliminar()
    {
        $('.elementoEliminar').hide();
        $('.elementoModificar').show();
    }

    /* Método que esconde el "div" de modificar y muestra el "div" de eliminar en la vista Información
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function esconderModificar() {
        $('.elementoEliminar').show();
        $('.elementoModificar').hide();

    }

    /* Método que borra los campos cambiados en la vista Información
     * Requiere: no aplica
     * Modifica: los campos en la vista Información
     * Retorna: el modelo cargado
     */
    function funcionCancelar() {
        var respuesta = confirm('¿Confirma que desea cancelar? Los cambios realizados no se guardarán');
        if (respuesta == true) {
            window.location.reload();
        }
    }

    /* Método que elimina la tupla de la base de datos en la vista Información
     * Requiere: no aplica
     * Modifica: no aplica
     * Retorna: no aplica
     */
    function confirmarEliminar(id) {
        var respuesta = confirm('¿Confirma que desea eliminar este usuario?');
        if (respuesta == true)
        {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("eliminarUsuario")',
                data: 'id=' + id,
                success: function (data) {
                    alert('Usuario eliminado exitosamente');
                    var url = '@Url.Action("Index", "ModuloUsuarios")';
                    window.location.href = url;
                },
            });
        }
    }

</script>

@{ HtmlString styleElementoEliminar;}
@{ HtmlString styleElementoModificar;}

<h2>Mi cuenta</h2>

<div class="elementoEliminar" style="text-align: right; width: 100%; color:limegreen; font-weight:bold;">
    <p>@ViewBag.StatusMessage</p>
</div>

@if (Model.errorValidacion == false)
{
    styleElementoEliminar = new HtmlString("");
    styleElementoModificar = new HtmlString("style =\"display: none\"");
}
else
{
    styleElementoEliminar = new HtmlString("style =\"display: none\"");
    styleElementoModificar = new HtmlString("");
}

<!-- Si la variable de cambios guardados es igual a 1, entonces los cambios se guardaron de manera exitosa
     en la base de datos, se imprime un mensaje de éxito
     Si la variable de cambios guardados es igual a 2, entonces los cambios no se guardaron de manera exitosa
     en la base de datos, se imprime un mensaje de error 
     Si la variable de cambios guardados es igual a 3, entonces los cambios se descartaron, se imprime un mensaje de 
     verificación -->
@if (Model.cambiosGuardados == 1)
{
    <div class="elementoEliminar" style="text-align: right; width: 100%; color:limegreen; font-weight:bold;">
        <p>Se guardaron los cambios exitosamente!</p>
    </div>
}
else if (Model.cambiosGuardados == 2)
{
    <div class="elementoModificar" style="text-align: right; width: 100%; color:red; font-weight:bold;">
        <p>Ha ocurrido un error al tratar de guardar los cambios!</p>
    </div>
}
else if (Model.cambiosGuardados == 3)
{
    <div class="elementoEliminar" style="text-align: right; width: 100%; color:limegreen; font-weight:bold;">
        <p>Cambios descartados!</p>
    </div>
}

<!-- Se imprimen botones para modificar y cambiar la contraseña -->
<div class="elementoEliminar" @styleElementoEliminar>
    <a class="btn btn-default" onclick="esconderEliminar()">Modificar</a>
    <a class="btn btn-default" onclick="location.href='@Url.Action("Cambio_Contraseña", "Manage")'">Cambiar contraseña</a>
</div>
<div class="elementoModificar" @styleElementoModificar>
    <h4> Modificar </h4>
</div>

<!-- Se despliega la información del elemento seleccionado cuando se va a eliminar -->
<div>
    <div class="elementoEliminar" @styleElementoEliminar>
        <hr />
        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Nombre)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Nombre)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Apellido1)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Apellido1)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Apellido2)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Apellido2)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Cedula)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Cedula)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modCrear.Email)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.aspUserEmail)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.FechaNac)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.FechaNac)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Telefono1)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Telefono1)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Telefono2)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.modeloUsuario.Telefono2)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.modeloUsuario.Sexo)
            </dt>
            <dd>
                @if (Model.modeloUsuario.Sexo == "F")
                {
                    @Html.DisplayName("Femenino")
                }
                else if (Model.modeloUsuario.Sexo == "M")
                {
                    @Html.DisplayName("Masculino")
                }
                else
                {
                    @Html.DisplayName("Otro")
                }
            </dd>
        </dl>
    </div>
</div>

<!-- Se despliega la información modificable, del elemento seleccionado cuando se va a modificar -->
<div class="elementoModificar" @styleElementoModificar>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.Nombre, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Apellido1, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.Apellido1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.Apellido1, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Apellido2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.Apellido2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.Apellido2, "", new { @class = "text-danger" })
                </div>
            </div>
            @Html.HiddenFor(model => model.modeloUsuario.Cedula)
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.FechaNac, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.FechaNac, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.FechaNac, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Telefono1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.Telefono1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.Telefono1, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Telefono2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.modeloUsuario.Telefono2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modeloUsuario.Telefono2, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modCrear.Email, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.aspUserEmail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.modCrear.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.modeloUsuario.Sexo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "F", false)@Html.DisplayName("Femenino")
                    @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "M", false)@Html.DisplayName("Masculino")
                    @Html.RadioButtonFor(model => model.modeloUsuario.Sexo, "O", false)@Html.DisplayName("Otro")
                </div>
            </div>

            @Html.HiddenFor(model => model.modeloUsuario.Id)
            <div class="form-group">
                <div class="form-inline" align="right">
                    <input type="submit" value="Aceptar" name="aceptar" class="btn btn-default" />
                    <a class="btn btn-default" onclick="confirmarSalir()">Cancelar</a>
                </div>
            </div>
        </div>
    }
</div>


