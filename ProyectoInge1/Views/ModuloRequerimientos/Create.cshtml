@model ProyectoInge1.Models.Requerimiento
@using ProyectoInge1.Models

@{
    ViewBag.Title = "Agregar requerimiento";
    ViewBag.pantallaActual = "requerimientos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .fileUpload {
        position: relative;
        overflow: hidden;
        margin: 15px;
    }

        .fileUpload input.upload {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            font-size: 20px;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }

    .row {
        padding-bottom: 1em;
    }

    img {
        width: auto;
        max-width: 279px;
        height: auto;
        max-height: 279px;
    }

    data {
        display: none;
    }

    .required:after {
        content: " *";
        font-weight: bold;
        color: red;
    }
</style>

<style>
    piv {
        display: none;
    }
</style>

<script>

    function cambioSolicitante() {
        $('#SolicitanteEscogido').val($('#SolicitanteActual').val());
    }

    function cambioResponsable() {
        $('#ResponsableEscogido').val($('#ResponsableActual').val());
    }

</script>

<script>
    function funcionCancelar() {
        var respuesta = confirm('¿Confirma que no desea insertar este requerimiento funcinal?');
        if (respuesta == true) {
            var url = '@Url.Action("Create", "ModuloRequerimientos")';
            window.location.href = url;
        }
    }

    function cambio() {
        var input = document.getElementById("uploadBtn");
        var fReader = new FileReader();
        fReader.readAsDataURL(input.files[0]);
        fReader.onloadend = function (event) {
            var img = document.getElementById("RuPic");
            img.src = event.target.result;
            document.getElementById("rutaImagen").value = event.target.result;
        }
    }

    /* Funciones para los criterios de aceptación */
    function removeNestedForm(element, container, deleteElement) {
        $container = $(element).parents(container);
        $container.find(deleteElement).val('True');
        $container.hide();
    }
    function addNestedForm(container, counter, ticks, content) {
        var nextIndex = $(counter).length;
        var pattern = new RegExp(ticks, "gi");
        content = content.replace(pattern, nextIndex);
        $(container).append(content);
    }
</script>

<h2>Agregar requerimiento</h2>

@if (Model.cambiosGuardados == 1)
{
    <div style="text-align: right; width: 100%; color:limegreen; font-weight:bold;">
        <p>Se guardaron los cambios exitosamente!</p>
    </div>
}
else if (Model.cambiosGuardados == 2)
{
    <div style="text-align: right; width: 100%; color:red; font-weight:bold;">
        <p>Ha ocurrido un error al tratar de guardar los cambios!</p>
    </div>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <!-- Atributos de un requerimiento -->

    <fieldset>
        <legend>Datos del Requerimiento</legend>

        <div class="row">
            @Html.Label("Proyecto", "Proyecto", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdProyecto, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.IdProyecto, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="row">
            @Html.LabelFor(model => model.Id, "Identificador", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.IdSolicitante, "Solicitante", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.DropDownList("Solicitante", null, "Seleccione un solicitante", htmlAttributes: new { @class = "form-control", @id = "SolicitanteActual", onchange = "cambioSolicitante();" })
                <piv>
                    @Html.EditorFor(model => model.IdSolicitante, new { htmlAttributes = new { @class = "form-control", @id = "SolicitanteEscogido" } })
                </piv>
                @Html.ValidationMessageFor(model => model.IdSolicitante, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Imagen, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.rutaImagen, new { htmlAttributes = new { @id = "rutaImagen", @class = "form-control" } })
                <div class="fileUpload btn btn-primary">
                    <span>Cargar</span>
                    <input id="uploadBtn" type="file" class="upload" onchange="cambio()" />
                </div>
            </div>

            @Html.Label("Vista", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4" width="200" height="200">
                <img id="RuPic" src="@(Model.rutaImagen)" />
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Observaciones, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Observaciones, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
            </div>
        </div>
    </fieldset>

    <fieldset>
        <legend>Datos de Estimación</legend>
        <div class="row">
            @Html.LabelFor(model => model.Prioridad, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Prioridad, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Prioridad, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Esfuerzo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Esfuerzo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Esfuerzo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.FechaInicio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaInicio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.FechaFinal, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FechaFinal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaFinal, "", new { @class = "text-danger" })
            </div>
        </div>
    </fieldset>

    <fieldset>
        <legend>Datos de Desarrollo</legend>
        <div class="row">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.Estado, new SelectList(new List<Object>{
                    new { value = "Pendiente de asignar" , text = "Pendiente de asignar"  },
                    new { value = "Asignado" , text = "Asignado"  },
                    new { value = "En ejecución" , text = "En ejecución" },
                    new { value = "Finalizado" , text = "Finalizado" },
                    new { value = "Cerrado" , text = "Cerrado"}
                }, "value", "text"), "Seleccione un estado", new { @class = "form-control" })
            </div>

            @Html.LabelFor(model => model.IdResponsable, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.DropDownList("Responsable", null, "Seleccione un responsable", htmlAttributes: new { @class = "form-control", @id = "ResponsableActual", onchange = "cambioResponsable();" })
                <piv>
                    @Html.EditorFor(model => model.IdResponsable, new { htmlAttributes = new { @class = "form-control", @id = "ResponsableEscogido" } })
                </piv>
                @Html.ValidationMessageFor(model => model.IdSolicitante, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Sprint, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Sprint, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sprint, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Modulo, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Modulo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Modulo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Value = "1" } })
                @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
            </div>
        </div>

    </fieldset>

    <fieldset>
        <legend>Criterios de Aceptación</legend>
        <div class="form-group">
            <div class="col-md-10" id="crite">

                @Html.AddLink("Agregar criterio", "#crite", ".criterios", "CriterioAceptacion", typeof(ProyectoInge1.Models.CriterioAceptacion))
                <p>
                    &nbsp;
                </p>
                @Html.EditorFor(model => model.CriterioAceptacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CriterioAceptacion, "", new { @class = "text-danger" })
                <p>
                    &nbsp;
                </p>
            </div>
        </div>
    </fieldset>

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="form-inline" align="right">
                <input type="submit" value="Aceptar" class="btn btn-default" />
                <a class="btn btn-default" onclick="funcionCancelar()">Cancelar</a>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
