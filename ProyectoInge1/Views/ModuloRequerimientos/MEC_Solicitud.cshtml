@model ProyectoInge1.Models.Cambio
@using ProyectoInge1.Models

@{
    ViewBag.Title = "Detalles Solicitud";
    ViewBag.pantallaActual = "solicitudes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .fileUpload {
        position: relative;
        overflow: hidden;
        margin: 15px;
    }

        .fileUpload input.upload {
            position: absolute;
            top: 0;
            right: 0;
            margin: 0;
            padding: 0;
            font-size: 20px;
            cursor: pointer;
            opacity: 0;
            filter: alpha(opacity=0);
        }

    .row {
        padding-bottom: 1em;
    }

    img {
        width: auto;
        max-width: 279px;
        height: auto;
        max-height: 279px;
    }

    .required:after {
        content: " *";
        font-weight: bold;
        color: red;
    }
</style>

<script>
    function habilitarCampos(estado) {
        if(estado == "Pendiente" || estado == "Modificar"){
            $("input").prop('disabled', false);
            $('select').prop('disabled', false);
            $("#descripcion *").prop("disabled", false);
            $("#descripcionCambio *").prop("disabled", false);
            $("#justificacionCambio *").prop("disabled", false);
            $('.elementoConsultar').hide();
            $('.elementoModificar').show();
        }else{
            alertify.error("No se puede modificar una solicitud que ya ha sido evaluada");
        }
    }

    function funcionCancelar() {
        msj = "¿Confirma que no desea modificar esta solicitud?";
        alertify.confirm(msj, function (e) {
            if (e) {
                window.location.reload();
            }
        });
    }

    window.onload = function () {
        if(@Model.cambiosGuardados == 0){
            $("input").prop('disabled', true).trigger("click");
            $('select').prop('disabled', true).trigger("click");
            $("#descripcion *").prop("disabled", true).trigger("click");
            $("#descripcionCambio *").prop("disabled", true).trigger("click");
            $("#justificacionCambio *").prop("disabled", true).trigger("click");
            $('.elementoModificar').hide();
            $('.elementoConsultar').show();
        }
    }

    function confirmarEliminar(estado, idSolicitud, idRequerimiento, idProyecto) {
        if(estado == "Pendiente"){
            msj = "¿Confirma que desea eliminar esta solicitud?"
            alertify.confirm(msj, function(e){
                if(e){
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("eliminarSolicitud")',
                        data: 'idSolicitud=' + idSolicitud + '&idRequerimiento=' + idRequerimiento + '&idProyecto=' + idProyecto,
                        success: function (data) {
                            if(data.success){
                                alertify.success("Solicitud eliminada exitosamente!");
                                var url = '@Url.Action("IndexSolicitud", "ModuloRequerimientos")';
                                window.location.href = url;
                            }else{
                                alertify.error("Error al eliminar la solicitud, intente de nuevo.");
                            }
                        },
                        error: function(){
                            alertify.error("Error al eliminar la solicitud, intente de nuevo.");
                        }
                    });
                }
            });
        }else{
            alertify.error('No se puede eliminar una solicitud que ya ha sido evaluada');
        }
    }

    //Mensajes despues de modificar
    if('@ViewBag.msj'=='exito'){
        alertify.success("Solicitud modificada exitosamente!");
    }else if('@ViewBag.msj'=='error'){
        alertify.error("Error al intentar modificar la solicitud");
    }

    function cambio() {
        var input = document.getElementById("uploadBtn");
        var fReader = new FileReader();
        fReader.readAsDataURL(input.files[0]);
        fReader.onloadend = function (event) {
            var img = document.getElementById("RuPic");
            img.src = event.target.result;
            document.getElementById("rutaImagen").value = event.target.result;
        }
    }

    /* Funciones para los criterios de aceptación */
    function removeNestedForm(element, container, deleteElement) {
        $container = $(element).parents(container);
        $container.find(deleteElement).val('True');
        $container.hide();
    }
    function addNestedForm(container, counter, ticks, content) {
        var nextIndex = $(counter).length;
        var pattern = new RegExp(ticks, "gi");
        content = content.replace(pattern, nextIndex);
        $(container).append(content);
    }

</script>


<div class="elementoConsultar">
    <h2>Consultar</h2>
</div>
<div class="elementoModificar" style="display:none">
    <h2>Modificar</h2>
</div>

<div class="elementoConsultar">
    <button type="button" class="btn btn-default" id="modificar" onclick="habilitarCampos('@(Model.EstadoSolicitud)')">Modificar</button>
    <a class="btn btn-default" id="eliminar" onclick="confirmarEliminar('@(Model.EstadoSolicitud)', '@(Model.IdSolicitud)', '@(Model.IdRequerimiento)', '@(Model.IdProyecto)')">Eliminar</a>
</div>

@using(Html.BeginForm()) {
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <fieldset>
        <legend>Datos del Requerimiento</legend>

        @Html.HiddenFor(model => model.IdSolicitud)

        @Html.HiddenFor(model => model.IdProyecto)
        <div class="row">
            <div class="form-group">
                @Html.LabelFor(model => model.IdProyecto, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.IdProyecto, new { htmlAttributes = new { @class = "form-control", @id = "Proyecto", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.IdProyecto, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @Html.HiddenFor(model => model.IdRequerimiento)
        <div class="row">
            @Html.LabelFor(model => model.IdRequerimiento, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                <div class="Id">
                    @Html.EditorFor(model => model.IdRequerimiento, new { htmlAttributes = new { @class = "form-control", @id = "Id", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.IdRequerimiento, "", new { @class = "text-danger" })
                </div>
            </div>

            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.Observaciones, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Observaciones, new { htmlAttributes = new { @class = "form-control"/*, placeholder = "Ejemplo: Abcd!123" } */} })
                @Html.ValidationMessageFor(model => model.Observaciones, "", new { @class = "text-danger" })
            </div>

            <div class="Solicitante">
                @Html.Label("Solicitante", htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.IdSolicitante, new SelectList(ViewBag.listaSolicitantes, "Id", "NombreCompleto"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.IdSolicitante, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            @Html.LabelFor(model => model.rutaImagen, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.rutaImagen, new { htmlAttributes = new { @id = "rutaImagen", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.rutaImagen, "", new { @class = "text-danger" })
                <div class="fileUpload btn btn-primary">
                    <span>Cargar</span>
                    <input id="uploadBtn" type="file" class="upload" onchange="cambio()" />
                </div>
            </div>

            @Html.Label("Vista", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4" width="200" height="200">
                <img id="RuPic" src="@(Model.rutaImagen)" />
            </div>
        </div>

        <div class="row">
            <div class="form-group" , id="descripcion">
                @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </fieldset>

        <fieldset>
            <legend>Datos de Estimación</legend>

            <div class="row">
                @Html.LabelFor(model => model.Prioridad, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Prioridad, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Prioridad, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Esfuerzo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Esfuerzo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Esfuerzo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.FechaInicio, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FechaInicio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.FechaFinal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FechaFinal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FechaFinal, "", new { @class = "text-danger" })
                </div>
            </div>
        </fieldset>

        <fieldset>
            <legend>Datos de Desarrollo</legend>

            <div class="row">
                @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Estado, new { htmlAttributes = new { @class = "form-control" } })
                </div>

                <div class="Responsable">
                    @Html.Label("Responsable", htmlAttributes: new { @class = "control-label required col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.IdResponsable, new SelectList(ViewBag.listaResponsables, "Id", "NombreCompleto"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.IdResponsable, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">

                @Html.LabelFor(model => model.Sprint, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Sprint, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Sprint, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.Modulo, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Modulo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Modulo, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.Version, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.Version, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Version, "", new { @class = "text-danger" })
                </div>
            </div>
        </fieldset>

    <!--Detalles de solicitud-->
        <fieldset>
            <legend>Detalles de Solicitud</legend>
            <div class="row">
                @Html.Label("Solicitante del cambio", htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.HiddenFor(model => model.SolicitanteCambio)
                    @Html.EditorFor(model => model.solicitanteCambioNombre, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.SolicitanteCambio, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.FechaCambio, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.FechaCambio, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.FechaCambio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.DescripcionCambio, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4" , id="descripcionCambio">
                    @Html.EditorFor(model => model.DescripcionCambio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DescripcionCambio, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.JustificacionCambio, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4" , id="justificacionCambio">
                    @Html.EditorFor(model => model.JustificacionCambio, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.JustificacionCambio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(model => model.EstadoSolicitud, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.EstadoSolicitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>

                @Html.LabelFor(model => model.VersionCambio, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.VersionCambio, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>

            <div class="row">
                <div class="col-md-5" style="border-bottom: 1px solid #A2C2CF;"></div>
            </div>
            <div class="row">
                @Html.LabelFor(model => model.ObservacionesSolicitud, htmlAttributes: new { @class = "control-label required col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(model => model.ObservacionesSolicitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>
        </fieldset>
        <fieldset id="campo">
            <legend>Criterios de Aceptación</legend>
            <div class="form-group">
                <div class="col-md-10" id="crite">

                    @Html.AddLink("Agregar criterio", "#crite", ".criterios", "CriterioAceptacionHistorial", typeof(ProyectoInge1.Models.CriterioAceptacionHistorial))
                    <p>
                        &nbsp;
                    </p>
                    @Html.EditorFor(model => model.CriterioAceptacionHistorial, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CriterioAceptacionHistorial, "", new { @class = "text-danger" })
                    <p>
                        &nbsp;
                    </p>
                </div>
            </div>
        </fieldset>

        <fieldset id="campo2">
            <legend>Criterios de Aceptación</legend>
            <div class="form-group">

                @foreach (var item in Model.CriterioAceptacionHistorial.ToList())
                {   @Html.Label("Descripción", htmlAttributes: new { @class = "control-label required col-md-2" })
                    <div class="col-md-10" id="crite2">
                        @Html.EditorFor(modelo => modelo.criteriosTexto, new { htmlAttributes = new { @class = "form-control", @Value = item.Descripcion.ToString(), } })
                        <p>
                            &nbsp;
                        </p>
                    </div>
                }
            </div>
        </fieldset>

    <!--Botones-->
        <div class="elementoModificar">
            <div class="form-group">
                <div class="form-inline" align="right">
                    <input type="submit" value="Aceptar" name="aceptar" class="btn btn-default" />
                    <a class="btn btn-default" onclick="funcionCancelar()">Cancelar</a>
                </div>
            </div>
        </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
